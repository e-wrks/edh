
while true { # this is the *Loop* in so-called REPL
  # Read+Eval (console.readCommand) -> Print (console.print) -> Loop

  case console.readCommand(
    ps1= "(" ++ __name__ ++ ")Đ: ",
    ps2= "Đ| "
  ) of {@
    { { batteries.Command: cmd } } -> case cmd.cmd of {
      # todo
      #  *) enrich custom behaviors according to `cmd.apk`
      #  *) support more commands
      'quit' -> { break }
      'dir' -> case cmd.apk of {
        # bare dir command
        { () } -> {
          hereBlockScope = scope()
          printDir( ofThe= hereBlockScope.outer )
        }
        # single arg as the target scope
        { ( tgt ) } -> printDir( ofThe= tgt )
        _ -> console.print( 'Unexpected args to dir command: ' ++ cmd.apk )
      }
      _ -> console.print( 'Unsupported command: ' ++ cmd )
    }

    { cmdVal } -> {
      console.print( cmdVal )
    }
  @}

} $=> { # catch exceptions

  { { IOError: ioExc } } -> {
    console.fatal<| 'IO error - ' ++ ioExc
    rethrow # escalate it to the program loop of the
    # host interpreter, let it decide what to do.
  }

  { cmdExc } -> {
    # the exception can have happened in a descendant goroutine/thread,
    # and throwTo this main thread, console.print() won't show such an
    # asynchronous exception timely, we use error log here.
    console.error<| 'Recovered from error: ' ++ desc( cmdExc )

    # TODO in case of asynchronous exception occurred, the last
    # console.readCommand() is interrupted, but the console IO loop is
    # still reading stdin, and what ever read will subsequently be
    # discarded anyway. this behavior may be rather surprising to the
    # user, need to optimize UX for such cases.
    console.info<| 'Your last input may have no effect due to the error.'
  }

}
