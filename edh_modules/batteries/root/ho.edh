{##
 # functional paradigm, higher order procedure support
 #}

# a language server will follow this import to find meta artifacts,
# while an interpreter will import nothing from the meta host module
import * 'batteries/meta'


export {

  # partial application
  method partial (*** apk1 ) method apply'to ( f ) {
    # for the at-notation (@fn) of the wrapper's procedure name to work, an
    # attribute of the key value is needed in scope
    fn = f.name

    # or to make an even fancy procedure name of the wrapper like this?
    # fn = f.name ++ '|partial' ++ repr( apk1 )

    # note this relies on the fact that the expression of a `return` statement
    # is evaluated as being pure, i.e. no attribute will get defined into scope
    # during the evaluation
    #
    # this is crucial for correctness, in case `f.name` happens to be one of
    # `apk1`, `f`, or `fn`, which clashes with our attributes in local scope
    return method @fn (*** apk2 ) {
      f(*** apk1, *** apk2 )
    }
  }

}
