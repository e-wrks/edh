{##
 # functional paradigm, higher order procedure support
 #}

# a language server will follow this import to find meta artifacts,
# while an interpreter will import nothing from the meta host module
import * 'batteries/meta'


export {

  {## Partially apply a procedure #}
  method partial ( ***apk1 ) method apply'to ( f ) {
    # note this relies on the fact that the expression of a `return` statement is evaluated in a pure context, so the method definition won't bind the defined procedure value to an attribute in current scope. this is crucial for correctness, in case `f.name` happens to be either `apk1` or `f`, which clashes with our attributes in local scope
    return method @( f.name )
    # or to make an even fancier procedure name of the wrapper like below?
    # @( f.name ++ '|partial' ++ repr( apk1 ) )
    ( ***apk2 ) {
      f( ***apk1, ***apk2 )
    }
  }

}
