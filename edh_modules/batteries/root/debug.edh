
# a language server will follow this import to find meta artifacts,
# while an interpreter will import nothing from the meta host module
import * 'batteries/meta'

import * './cmd'
import * './str'

export {

  if console.logLevel <= console.debug then {

    # world-wide indicator whether the world is under debugging
    debug=this # alias to this module when debugging

    # the advantage of being an interpreter procedure here, is no eval of rest
    # exprs as long as the assertion stands
    interpreter assert( callerScope,
      assertion, msg=None, ***details
    ) case callerScope.eval( assertion ) of {
      true -> { pass } # as it should be

      # other values are unexpected
      nil -> { result = '<nil>'; fallthrough }
      { result } -> { fallthrough }

      detailsResult = if null $ details
      then () # empty apk, don't bother eval it
      # note in below we localize artifacts (avoid polluting the outer scope),
      # with a scoped block {@ ... @}
      else {@ case d = callerScope.eval(*** details ) | type of {
          nil -> () # a very corner case, convert to an empty apk
          ArgsPackType -> d
          _ -> ( d, ) # single value, convert to an apk
      } @}

      error(
        msg and callerScope.eval( msg ) or 'assertion failed',
        # following goes as the thrown exception's @.details@
        result= result, ***detailsResult
      )
    }

  } else {

    debug=false # not debugging

    # assert being nop when not debugging
    method assert(*** _ ) pass

  }

  # the default basic implementation for the `dir` command
  interpreter printDir( callerScope, ofThe= None, ) case (
    if ofThe is not None
    then callerScope.eval( ofThe )
    else callerScope
  ) of {
    { { scope: ofScope } }
    -> console.print( ofScope.lexiLoc, **ofScope.attrs() )
    { otherVal } -> {
      ; | type( otherVal ) is ObjectType -> {
        ofScope = scope( ofObj= otherVal )
        console.print( desc( otherVal ), **ofScope.attrs() )
      }
      console.print( 'Not an object but - ' ++ desc( otherVal ) )
    }
  }

  # basic implementation of a string form for `dir` command to
  # output to a remote console
  interpreter sprintDir( callerScope, ofThe= None, ) case (
    if ofThe is not None
    then callerScope.eval( ofThe )
    else callerScope
  ) of {
    { { scope: ofScope } } -> join( sep= '\n',
      ofScope.lexiLoc,
      *() =< for ( k, v ) from ofScope.attrs() do
      '  ' ++ k ++ '= ' ++ v
    )
    { otherVal } -> {
      ; | type( otherVal ) is ObjectType -> {
        ofScope = scope( ofObj= otherVal )
        join( sep= '\n',
          desc( otherVal ),
          *() =< for ( k, v ) from ofScope.attrs() do
          '  ' ++ k ++ '= ' ++ v
        )
      }
      'Not an object but - ' ++ desc( otherVal )
    }
  }

  interpreter replHere( callerScope, prompt=None ) {
    prompt = prompt and callerScope.eval( prompt ) or repr( callerScope )

    console.print(
      ' * entering a repl at ' ++ callerScope.lexiLoc,
      ' * key in `quit` or `continue` to leave the repl and continue.',
    )

    rcArgs = ( ps1= '' ++prompt++ ' Đ: ', ps2= "Đ| ", inScopeOf=callerScope )
    while true {

      case console.readCommand(*** rcArgs ) of {@
        { continue } -> { break }
        { { Command: cmd } } -> case cmd.cmd of {
          # todo
          #  *) enrich custom behaviors according to `cmd.apk`
          #  *) support more commands
          'quit' -> { break }
          'dir' -> case cmd.apk of {
            # bare dir command
            { () } -> {
              printDir( ofThe= callerScope )
            }
            # single arg as the target scope
            { ( tgtScope ) } -> case tgtScope of {
              { { scope:_ } } -> printDir( ofThe= tgtScope )
              # todo special treatment for module/namespace ?
              # { { module:_ } } -> printDir( ofThe= scope( ofObj=tgtScope ) )
              # { { namespace:_ } } -> printDir( ofThe= scope( ofObj=tgtScope ) )
              ; | type( tgtScope ) is ObjectType -> printDir(
                ofThe= scope( ofObj=tgtScope )
              )
              _ -> console.print( 'Unexpected args to dir command: ' ++ cmd.apk )
            }
            _ -> console.print( 'Unexpected args to dir command: ' ++ cmd.apk )
          }
          _ -> console.print( 'Unsupported command: ' ++ cmd )
        }

        { cmdVal } -> {
          console.print( cmdVal )
        }
      @}

    } $=> { # catch exceptions

      { { IOError:ioExc } } -> {
        console.fatal <| 'IO error - ' ++ ioExc
        rethrow # escalate it to the program loop of the
        # host interpreter, let it decide what to do.
      }

      { cmdExc } -> {
        console.error<| 'Recovered from error: ' ++ desc( cmdExc )
      }

    }

  }

  {#
   # run a repl within an object's (probably a module) scope, e.g.
  ```edh
  m = { import (**_) 'batteries/magic' }
  replWith(m)
  ```
   #}
  method replWith( obj ) {
    if type( obj ) is not ObjectType
    # if we don't throw here, the while-loop below will loop infinitely,
    # as it'll try recover from errors
    then error( 'Not an object but: ' ++ desc( obj ) )

    console.print( ' * entering a repl within ' ++ desc( obj ) )
    console.print( ' * key in `quit` or `continue` to leave the repl.' )

    # use scope obj's repr for ps1
    rcArgs = ( ps1=repr( obj ) ++ ' Đ: ', ps2= "Đ| ", inScopeOf=obj )
    while true {

      case console.readCommand(*** rcArgs ) of {@
        { continue } -> { break }
        { { Command: cmd } } -> case cmd.cmd of {
          # todo
          #  *) enrich custom behaviors according to `cmd.apk`
          #  *) support more commands
          'quit' -> { break }
          'dir' -> case cmd.apk of {
            # bare dir command
            { () } -> {
              printDir( scope( ofObj=obj ) )
            }
            # single arg as the target scope
            { ( tgtScope ) } -> case tgtScope of {
              { { scope:_ } } -> printDir( ofThe= tgtScope )
              # todo special treatment for module/namespace ?
              # { { module:_ } } -> printDir( ofThe= scope( ofObj=tgtScope ) )
              # { { namespace:_ } } -> printDir( ofThe= scope( ofObj=tgtScope ) )
              ; | type( tgtScope ) is ObjectType -> printDir(
                ofThe= scope( ofObj=tgtScope )
              )
              _ -> console.print( 'Unexpected args to dir command: ' ++ cmd.apk )
            }
            _ -> console.print( 'Unexpected args to dir command: ' ++ cmd.apk )
          }
          _ -> console.print( 'Unsupported command: ' ++ cmd )
        }

        { cmdVal } -> {
          console.print( cmdVal )
        }
      @}

    } $=> { # catch exceptions

      { { IOError:ioExc } } -> {
        console.fatal <| 'IO error - ' ++ ioExc
        rethrow # escalate it to the program loop of the
        # host interpreter, let it decide what to do.
      }

      { cmdExc } -> {
        console.error<| 'Recovered from error: ' ++ desc( cmdExc )
      }

    }

  }

}
