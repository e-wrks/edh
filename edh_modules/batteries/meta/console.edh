{##
 # this module is meant to be imported by an Đ language server, into every
 # meta world's root scope at analysis time, reflecting definition information
 # of the corresponding host artifacts at runtime.
 #
 # the purpose is for sakes of tooling functionalities, typically an IDE like
 # VSCode.
 #
 #}

import * './exc'

# this module should never get imported by any Đ interpreter for the run
error( 'Executing meta module: ' ++ __name__ )


{##
 # Console is a namespace containing constants, methods for interaction with the os environment.
 #}
export namespace console () export {
  {## Constant for logging to target at DEBUG level #}
  debug = 10
  {## Constant for logging to target at INFO level #}
  info = 20
  {## Constant for logging to target at WARNING level #}
  warn = 30
  {## Constant for logging to target at ERROR level #}
  error = 40
  {## Constant for logging to target at FATAL level #}
  fatal = 50

  logLevel :: int!Decimal
  {##
   # Configured logging level by the environment

Controlled by os environment variable `EDH_LOG_LEVEL`

   #}
  logLevel = this.info # the default


  exit :: ( Any ) -> { throw ProgramHalt }
  {##
   # Halt current Đ program with an optional value

If the program is run by the main thread of an Đ interpreter process, this will quit the process with an exit code from `haltValue` if it is an integer number.

   #}
  method exit( haltValue=None ) {
    throw ProgramHalt( haltValue )
  }


  readSource :: ( String || None, String || None ) -> String
  {##
   # Read a piece of source code from stdin
   #}
  method readSource( ps1= "Đ: ", ps2= "Đ| " ) {
    '<text-read-from-stdin>'
  }


  readCommand :: (
    String || None, String || None, Object || None,
  ) -> Any
  {##
   # Read a piece of source code from stdin, evaluate as Đ source and return the result

`inScopeOf` can be specified for the contextual scope, or the source will be evaluated as in the caller's scope. it can be a reflective scope object or a vanilla Đ object (including namespace objects and module objects)

   #}
  method readCommand( ps1= "Đ: ", ps2= "Đ| ", inScopeOf= None ) {
    pass
  }

  log :: ( *Any, level= Decimal, **Any ) -> nil
  {##
   # Log messages to stderr
   #}
  method log( *args, level= console.info, **kwargs ) void {
  }

  print :: ( *Any, eol= String, **Any ) -> nil
  {##
   # Print things to stdout

`repr` will be used to convert each non-string argument to string form for the print

   #}
  method print( *args, eol= '\n', **kwargs ) void {
  }


  now :: () -> int!Decimal
  {##
   # Obtain nanoseconds ellapsed since epoch in UTC, from the underlying operating system
   #}
  method now() 0


  everySeconds
  :: ( s!int!Decimal, Bool || None )
  -> [ ns!int!Decimal ] =>* nil
  {##
   # Yield `this.now()` at the specified interval

The first yield may wait an interval or not, according to how `wait1st` is specified

   #}
  generator everySeconds( interval, wait1st=true ) void {
    yield this.now()
  }

  everyMicros
  :: ( us!int!Decimal, Bool || None )
  -> [ ns!int!Decimal ] =>* nil
  {##
   # yield `this.now()` at the specified interval

The first yield may wait an interval or not, according to how `wait1st` is specified

   #}
  generator everyMicros( interval, wait1st=true ) void {
    yield this.now()
  }

  everyMillis
  :: ( ms!int!Decimal, Bool || None )
  -> [ ns!int!Decimal ] =>* nil
  {##
   # yield `this.now()` at the specified interval

The first yield may wait an interval or not, according to how `wait1st` is specified

   #}
  generator everyMillis( interval, wait1st=true ) void {
    yield this.now()
  }

}
