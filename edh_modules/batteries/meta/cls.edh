{##
 # this module is meant to be imported by an Edh language server, into every
 # meta world's root scope at analysis time, reflecting definition information
 # of the corresponding host artifacts at runtime.
 #
 # the purpose is for sakes of tooling functionalities, typically an IDE like
 # VSCode.
 #
 #}

import * './exc'

# this module should never get imported by any Edh interpreter for the run
error( 'Executing meta module: ' ++ __name__ )

import * './decor'


export {


  {##
   # the namespace class is only addressable in instance resolution patterns,
   # e.g.
   #
```edh
case xx of {{ namespace:ns }} -> {
  console.print('got a namespace object: ' ++ ns)
}
```
   #
   # otherwise `namespace` is a keyword, only valid to appear in the namespace
   # definition syntax
   #}
  class @'namespace' {}


  {##
   # the scope wrapper class
   #}
  class scope {

    scope :: () -> scope
    scope :: ( ofObj= Object ) -> scope
    {##
     # wrap the caller's scope or the object specified by `ofObj` as a
     # reflective object
     #}
    method __init__( ofObj= None ) pass

    eval :: ( Expr, String= None ) -> Any
    {##
     # evaluate the specified expression within the wrapped scope
     #}
    method eval( expression, srcName= None ) pass

    get :: ( String ) -> Any
    get :: ( Symbol ) -> Any
    get :: ( ArgsPack ) -> ArgsPack
    {##
     # lookup attribute(s) from the wrapped scope
     #
     # a single value is returned if a single argument is passed
     #
     # otherwise an apk (morphed after the input apk) is returned with each
     # argument in it looked up as attribute key against the wrapped scope
     #
     # note the attribute key has to be string or symbol, otherwise runtime
     # error will be thrown
     #}
    method get(*** apk ) pass


    put :: ( String:Any ) -> nil
    put :: ( Symbol:Any ) -> nil
    put :: ( ArgsPack ) -> ArgsPack
    {##
     # put attributes into the wrapped scope
     #
     # key/value pairs can be used as positional arguments, as well as keyword
     # arguments
     #
     # note the key in a pair has to be string or symbol, otherwise runtime
     # error will be thrown
     #}
    method put(*** apk ) pass


    attrs :: () -> keywords!ArgsPack
    {##
     # obtain all attributes from the wrapped scope
     #}
    method attrs() pass

    outer :: scope
    {##
     # get lexical outer scope of the wrapped scope, readonly
     #}
    property$ method outer() pass

    lexiLoc :: String
    {##
     # get source location of the wrapped scope
     #}
    property$ method lexiLoc() pass

  }


  {##
   # the module class
   #
   # module objects are usually constructed implicitly by running Đ code from
   # command line, then then imports performed meanwhile
   #}
  class module {

    __name__ :: String
    __file__ :: String

  }


  {##
   # Boxed Vector for Đ values, non-transactional, mutable anytime
   #}
  class Vector {

    method append(*args) pass

  }


  {##
   # Semaphore for concurrency control

Some inventory of specified amount (positive integer) can be (possibly blocking) waited, while the total number of inventory that ready for consumption, can be asynchronously put/increased/decreased/cleared without blocking.

   #}
  class Semaphore {

    {## Host language's integer type expected, even tho passed as Đ decimal value #}
    PositiveInt :=: 'Decimal'

    method __init__( initial: PositiveInt ) pass

    {##
Wait any number of inventory comes available, consume all of them, return the amount consumed.
     #}
    method waitAny(): PositiveInt pass

    {##
Wait until the specified number of inventory can be consumed, consume exactly that many and return the amount remain available (possibly zero).
     #}
    method wait( consume: PositiveInt = 1 ): PositiveInt pass

    {##
Clear the inventory, return the amount (possibly zero) that originally available.
     #}
    method clear(): PositiveInt pass

    {##
Put the specified number of inventory as the new total, regardless of how many originally available, that number (possibly zero) is returned tho.
     #}
    method put( inv: PositiveInt ): PositiveInt pass

    {##
Increase the total number of inventory as specified, return the original number (possibly zero).
     #}
    method inc( chg: PositiveInt = 1 ): PositiveInt pass

    {##
Decrease the total number of inventory as specified, return the original number (possibly zero).

Note the number can never be really decreased below zero, the inventory is assumed to be cleared (i.e. total number turns zero) in that case.
     #}
    method dec( chg: PositiveInt = 1 ): PositiveInt pass

  }

}
