{##
 # this module is meant to be imported by an Edh language server, into every
 # meta world's root scope at analysis time, reflecting definition information
 # of the corresponding host artifacts at runtime.
 #
 # the purpose is for sakes of tooling functionalities, typically an IDE like
 # VSCode.
 #
 #}

import * './exc'

# this module should never get imported by any Edh interpreter for the run
error( 'Executing meta module: ' ++ __name__ )


export {

  {##
   # The annotation operator
   #}
  infix -9 (::) ( callerScope, lhx, rhx ) pass

  {##
   # The left-dropping annotation operator
   #}
  infixr 0 (!) ( callerScope, lhx, rhx ) pass

  {##
   # The procedure call operator
   #
   # At par to function application operator ($) as in Haskell
   #}
  infixr -5 ($) ( lhx, rhx ) pass

  {##
   # The flipped procedure call operator
   #
   # At par to flipped function application operator (&) as in Haskell
   #}
  infixl 0 (|) ( lhx, rhx ) pass


  # TODO the rest of all available host operators need meta def/doc here

}
