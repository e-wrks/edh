
# to define mid-dot as the function composition operator
# see: https://middot.net for how to input a mid-dot

infixr 9 ( · ) ( f, g ) x => f ( g ( x ) )

show$ ( · )

# %%
method f x x+5
method g x x*3

p = f · g

p|desc

# %%
2 | p
# %%
p $ 2
# %%
p( 2 )


# Some fancy chars can be used in operators
#
# 🔀🔁🔂⏩⏪🔼⏫🔽⏬⏹️
# 🌀📢📣🔔🔕🎵⭕
# 🆔🆘🆚
# ✨

# %%
infixr 5 ( 📣 ) ( lhv, rhv ) {
  console.info <| rhv ++ ' is telling ' ++ lhv
  return rhv
}
; ( 📣 ) | show

# %%
'a lie' 📣 'a tale' 📣 'the goat'

# %%
operator 1 ( 🆚 ) ( lhv, rhv ) {
  console.info <| "🌀 What's the difference?\n     "
  ++ lhv ++ '\n  🆚\n     ' ++ rhv
}
; ( 🆚 ) | show

# %%
let ( a, b ) = ( 'Orange', 'Apple', )
a 🆚 b

# %%
# destined to fail
a 🆚 b 🆚 c


# %%
# overide the (++) operator within a dedicated namespace, avoid polluting the
# module scope
namespace comparison'workspace () {
  before = 'You' ++ ' and ' ++ 'me'

  # for an operator already declared beforehand, the fixity follows existing
  # declaration when you use `operator` or `infix` as the keyword to override it
  operator (++) ( lhv, rhv ) {
    # inside the overriding operator definition, the overridden,
    # original operator is available as was before the overide
    lhv ++ ' ⭕ ' ++ rhv
  }

  after = 'You' ++ ' and ' ++ 'me'
}

# obtain a reflective scope object, we can eval expressions in the namespace
# with this scope object
dynamic'workspace = scope( comparison'workspace )

# check the result there
dynamic'workspace.eval( expr

  before 🆚 after

)

# %%
# a method or interpreter procedure can be re-declared as some operator, if
# it takes exactly 2 positional arguments

method concat1( lhv, rhv ) {
  lhv ++ ' plus ' ++ rhv
}
infixl 3 (>+<) () concat1

interpreter concat2( callerScope, lhe, rhe ) {
  callerScope.eval( lhe ) ++ ' and ' ++ callerScope.eval( rhe )
}
infixl 3 (>&<) () concat2

# %%
# all operators can combine together, according to their respective fixity and
# precedence

3*7 >+< 9*9
🆚
3*7 >&< 9*9
