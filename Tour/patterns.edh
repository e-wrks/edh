
# %%
# a wild capturing pattern is useful when the match target is a complex
# expression
case 3*7-5 of { result }
-> 'a wild capture pattern receives the result= ' ++ result

# %%
case 3:2:1 of {
  { x:y } -> 'pair pattern matches the length'
  { x:y:z } -> 'so this one fires instead of the above'
}

# %%
case 3:2 of { ( x:y ) }
-> 'the pair pattern can be parenthesised'

# %%
case 'b' of { [ 'a', 'b', 'c' ] }
-> 'any-of pattern does is-element-of test'

# %%
case [ 7, 3, 5 ] of { head :> tail }
-> 'uncons pattern does uncons, got ' ++ ( head, tail )

# %%
case ( 3, 5, 7 ) of {
  { ( x, y ) } -> 'positional args pattern matches the length'
  { ( x, y, z ) } -> 'so this one fires instead of the above'
}

# %%
case [] of { () }
-> 'but an empty args pattern matches empty list as well'

# %%
class B pass
class C extends B
c = C()

# %%
case c of { { B:b } }
-> 'instance resolving pattern obtains the right super instance: ' ++ b

# %%
case 'abc' of { prefix @< 'b' >@ suffix }
-> 'string cut patterns can obtain prefix & suffix like: '
+ prefix + ' & ' + suffix
