
class Data {

  d = {}

  # magic method responding to read with an index
  method ([]) ( ix ) {

    # console.info <| 'Indexing with ' ++ type(ix) ++ ': ' ++ ix

    case ix of {

      { ( start:stop:step ) } -> {
        console.info <| 'Indexing interleaved 1d range: ' ++ ix
        return NA # no way to be success on a dict
      }

      { ( start:stop ) } -> {
        console.info <| 'Indexing contiguous 1d range: ' ++ ix
        return NA # no way to be success on a dict
      }

      { ( dim'1, dim'2 ) } -> {

        console.info <| 'Indexing 2d space with: ' ++ ix

        case dim'1 of {
          { ( start:stop:step ) } -> {
            console.info <| 'Indexing interleaved 1st dimension range: ' ++ dim'1
            return NA # no way to be success on a dict
          }

          { ( start:stop ) } -> {
            console.info <| 'Indexing contiguous 1st dimension range: ' ++ dim'1
            return NA # no way to be success on a dict
          }
        }

        # similar can be done for 2nd dimension - dim'2

        return NA # no way to be success on a dict
      }

    }

    case type( ix ) of {
      DecimalType -> {
        console.info <| 'Indexing 1d element: ' ++ ix
      }
      StringType -> {
        console.info <| 'Indexing column by name: ' ++ ix
      }
      _ -> {
        console.info <| 'Suspicious index ' ++ type( ix ) ++ ': ' ++ ix
        return NA # avoid actually doing indexing with this ix
      }
    }

    return this.d[ ix ]
  }

  # magic method responding to write with an index
  method ([=]) ( ix, val ) this.d[ ix ] = val

}

# %%
d = Data()

# %%
d[ 3 ] = 5
d[ 3 ]

# %%
d[ 'price' ] = [ 1.2, 1.3, 1.1 ]
d[ 'price' ]

# %%
d[ 3:5 ] = 7
d[ 3:5 ]

# %%
d[ 3:5:2, 0:7:3 ]

# %%
d[ 3, 5, 7 ]
