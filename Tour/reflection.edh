
# expression is 1st class citizen in Edh

# create as literal
x = expr a + b*c
type( x )

# a scope can be captured anywhere within Edh code
this'modu'scope = scope()

# this will fail as `x` references attributes unavailable
this'modu'scope.eval( x )

# `scope.put()` is used to update attributes reflectively
this'modu'scope.put( a=5, b=3 )
# of course Edh code can update attributes normally
c = 7

# now it should happily eval
this'modu'scope.eval( x )

# a reflective scope can only be captured and exposed
# by its owning procedure willingly, some more demos

{
  method f( n ) {
    method g( m ) {
      scope()
    }
    return ( scope(), g( 5 ) )
  }
}
let ( s1, s2 ) = (* f( 3 ) )

s2.lexiLoc

s1.attrs()

s2.attrs()

s2.eval( expr m/n )

{
  s2.eval( assign'result = ( expr
      t=n/m
  ) )
}

s2.attrs()
s2.get( 't' )
