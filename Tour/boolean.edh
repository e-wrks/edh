
# %%
# (and) and (or) are nullish testing boolean operators, almost the same as in
# Python.
#
# they don't require or coerce either operand to `BoolType`, and use `null()`
# testing semantic to decide which operand to return, so they respect magic
# method `__null__()` for object values
#
# an important property of these operators are short-circuiting according to
# their left-hand operand.
#
# while magic method overrides are imposible to (and) and (or)

# %%
true or { console.print$ "impossible to get eval'ed"; false }

# %%
false and { console.print$ "impossible to get eval'ed"; true }

# %%
# (&&) and (||) are boolean operators potentially carrying bit-wise and/or
# vectorization semantics (as however implemented by magic methods from either
# operands). in case no magic method present, both operands are required to be
# of `BoolType`, or the operation is considered not applicable (NA is returned
# to the runtime), so they are guaranteed to return exact `true` or `false`
# value, where applicable and not overridden by some magic method.
#
# especially note they are NOT short-circuiting, i.e. both operands are
# guaranteed to be eval'ed, this is crucial for magic methods to always work
# with both left-hand and right-hand object values.

# %%
true || { console.print$ "surely get eval'ed"; false }

# %%
false && { console.print$ "surely get eval'ed"; true }
