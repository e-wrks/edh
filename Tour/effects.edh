{#
 # dynamic scoped effects
 #   -- an imperative counterpart of functional monads
 #
 # with mathematical methodologies, monads is a mature and powerful machinery
 # best implemented in a functional programming language, to vend and consume
 # provisional effects with well defined contexts.
 # (there is algebraic effects & handlers under active development at time
 # of speaking - 2020)
 #
 # with procedural methodologies, such contextual semantics of APIs are
 # largely ended up defined and consulted as specifications in descriptive
 # documentation form, in lieu of language constructs to encode the
 # applicability of certain effects contextual-wise.
 #
 # *dynamic scoped effects* essentially is *dynamic scoping* with a separate
 # effect registration & resolution space, avoided the failure of traditional
 # dynamic scoping that lexical artifacts get mixed with callstack provided
 # artifacts, which has things confusingly messed up.
 #
 #}


# %{ # technical basics

# %% #
method effectfulHello() void {
  effect greetingWord = 'Hello'

  perform greetingPhrase() | console.print
}

method effectfulConsumer() void {
  effect method greetingPhrase() {
    return behave greetingWord ++ ', world!'
  }

  effectfulHello()
}


# %% # run it
effectfulConsumer()

# %} # end of technical basics


# %{ # mockup a services & applications framework

# %% # simple mockup of a user record

data User( id_, name ) pass


# %% # middle-ware / library functions leveraging the framework

# mockup of interactive password based authentication
# would consult some hierarchical storage to obtain user info as well as
# valid the password
method authenticateUser() {
  case userId = perform ctxUserId() of {
    'world' -> {
      if perform ctxUserToken() is 'valid'
      then return User( userId, 'World' )
      else {
        passPrompt = 'please login'
        while true case perform requestUserPassword( passPrompt ) of {
          nil -> throw BusinessProcessCancelled()
          'secret' -> {
            perform ctxGrantUserToken( 'valid' )
            return User( userId, 'World' )
          }
          _ -> passPrompt = 'your password is incorrect'
        }
      }
    }
    _ -> error( 'no such user: ' ++ userId )
  }
}

# entry point of the business enabling framework
method lib'doBusiness( businessLogic ) {
  # prepare the dynamic scoped effects as an environment that businessLogic
  # expects
  effect loginUser = authenticateUser()
  # then do the business in context
  businessLogic()
}

# demostrate some reused library function
method lib'Greet() {
  user = perform loginUser
  perform toCtxUserShow( 'Hello, ' ++ user.name ++ '!' )
}

# %% # business services

# demostrate some application defined business service, of proper granularity
method app'SomeService() {
  lib'doBusiness( () => {
      # be polite
      lib'Greet()
      # do more processing
      perform toCtxUserShow( 'You are awesome!' )
  } )
}

# %% # technology adapters

# mockup an http endpoint for some service
method app'mockHttpEndPoint() {
  # mockup of an http adaptor for a service
  # it would be from url or post form of the http request
  namespace requestCtxData(
    _userToken = None # would be from some cookie
  ) pass
  effect {
    method toCtxUserShow( msg, **formatting'specs ) {
      # would write the http response body,
      # or post to some ajax channel
      console.print( msg, **formatting'specs )
    }
    method ctxUserId() 'world' # would be from some request parameter
    method ctxUserToken() requestCtxData._userToken
    method ctxGrantUserToken( userToken ) {
      requestCtxData._userToken = userToken
      # then set cookie into the response, or some ajax channel
    }
    method requestUserPassword( promptMsg ) {
      if someCancelCondition!false then return nil
      # would be from some request parameter, or some ajax channel
      return 'secret'
    }
  }

  app'SomeService()
}

pass
# %} # end of the framework mockup


# %% # demo/test the mockup

app'mockHttpEndPoint()
